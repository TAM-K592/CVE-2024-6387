import socket
import argparse
import ipaddress
import threading
from queue import Queue

# Function to check if a port is open
def is_port_open(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=1):
            return True
    except:
        return False

# Function to retrieve the SSH banner from the server
def get_ssh_banner(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=2) as sock:
            banner = sock.recv(1024).decode().strip()
            return banner
    except Exception as e:
        return str(e)

# Function to check if the retrieved SSH banner indicates a vulnerable version
def check_vulnerability(ip, ports, result_queue):
    for port in ports:
        if not is_port_open(ip, port):
            result_queue.put((ip, port, 'closed', "Port is closed"))
            continue

        banner = get_ssh_banner(ip, port)
        if "SSH-2.0-OpenSSH" not in banner:
            result_queue.put((ip, port, 'failed', f"Unable to retrieve SSH banner: {banner}"))
            continue

        vulnerable_versions = [
            'SSH-2.0-OpenSSH_8.5p1',
            'SSH-2.0-OpenSSH_8.6p1',
            'SSH-2.0-OpenSSH_8.7p1',
            'SSH-2.0-OpenSSH_8.8p1',
            'SSH-2.0-OpenSSH_8.9p1',
            'SSH-2.0-OpenSSH_9.0p1',
            'SSH-2.0-OpenSSH_9.1p1',
            'SSH-2.0-OpenSSH_9.2p1',
            'SSH-2.0-OpenSSH_9.3p1',
            'SSH-2.0-OpenSSH_9.4p1',
            'SSH-2.0-OpenSSH_9.5p1',
            'SSH-2.0-OpenSSH_9.6p1',
            'SSH-2.0-OpenSSH_9.7p1'
        ]

        if any(version in banner for version in vulnerable_versions):
            result_queue.put((ip, port, 'vulnerable', f"Server running vulnerable version: {banner}"))
        else:
            result_queue.put((ip, port, 'not_vulnerable', f"Server running non-vulnerable version: {banner}"))

# Main function to parse arguments and initiate vulnerability checks
def main():
    parser = argparse.ArgumentParser(description="Check if servers are running a vulnerable version of OpenSSH.")
    parser.add_argument("targets", nargs='+', help="IP addresses, domain names, file paths containing IP addresses, or CIDR network ranges.")
    parser.add_argument("--ports", type=int, nargs='+', default=[22], help="Port numbers to check (default: 22).")

    args = parser.parse_args()
    targets = args.targets
    ports = args.ports

    ips = []
    for target in targets:
        try:
            with open(target, 'r') as file:
                ips.extend(file.readlines())
        except IOError:
            if '/' in target:
                try:
                    network = ipaddress.ip_network(target, strict=False)
                    ips.extend([str(ip) for ip in network.hosts()])
                except ValueError:
                    print(f"Invalid CIDR notation: {target}")
            else:
                ips.append(target)

    result_queue = Queue()
    threads = []

    # Create and start threads for each IP address
    for ip in ips:
        ip = ip.strip()
        thread = threading.Thread(target=check_vulnerability, args=(ip, ports, result_queue))
        thread.start()
        threads.append(thread)

    # Wait for all threads to complete
    for thread in threads:
        thread.join()

    # Process results
    total_scanned = len(ips)
    closed_ports = 0
    not_vulnerable = []
    vulnerable = []

    while not result_queue.empty():
        ip, port, status, message = result_queue.get()
        if status == 'closed':
            closed_ports += 1
        elif status == 'vulnerable':
            vulnerable.append((ip, port, message))
        elif status == 'not_vulnerable':
            not_vulnerable.append((ip, port, message))
        else:
            print(f"[!] Unexpected result for {ip}:{port} - {message}")

    # Output results
    print(f"\nResults Summary:\n")
    print(f"Total targets scanned: {total_scanned}")
    print(f"Ports closed: {closed_ports}")
    print(f"Non-vulnerable servers: {len(not_vulnerable)}")
    for ip, port, msg in not_vulnerable:
        print(f"  - {ip}:{port} : {msg}")
    print(f"Vulnerable servers: {len(vulnerable)}")
    for ip, port, msg in vulnerable:
        print(f"  - {ip}:{port} : {msg}")

if __name__ == "__main__":
    main()
